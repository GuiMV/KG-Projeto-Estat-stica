# -*- coding: utf-8 -*-
"""Projeto Pokémon e Estatística.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yh-UoPmO5NH972ZwE-MFHyytweOVytfX

#Bibliotecas Necessárias e Dataset:


1.   Pandas: Manipulação de dados;

Possíveis Bibliotecas
2.   Numpy: Computação numérica (médias, desvios-padrão, correlações...)
3.   Matplotlib e Seaborn: Visualização de dados (gráficos, histogramas.)
"""

import pandas as pd
#import numpy as np
#import matplotlib.pyplot as plt
#import seaborn as sns

df = pd.read_csv('https://raw.githubusercontent.com/GuiMV/KG-Projeto-Estat-stica/refs/heads/main/dataset/pokemon_data.csv')
amostra = pd.read_csv('https://raw.githubusercontent.com/GuiMV/KG-Projeto-Estat-stica/refs/heads/main/dataset/pokemon_amostra.csv')

"""# Funções"""

def exibir_colunas(colunas, colunas_por_linha=6, largura_fixa=22):
    for i, col in enumerate(colunas, 1):
        print(col.ljust(largura_fixa), end='')
        if i % colunas_por_linha == 0:
            print()
    print()

def mostrar_dataset():
    pd.set_option('display.max_columns', 5)
    print(df.head(5))

def tamanho_dataset():
  print(f"O dataset possui {df.shape[0]} linhas e {df.shape[1]} colunas.")
  print(f"A amostra possui {amostra.shape[0]} linhas e {amostra.shape[1]} colunas.")

def mostrar_colunas():
  exibir_colunas(df.columns, colunas_por_linha=6)

def v_qualitativas():
  colunas = ['ID', 'Name', 'Type 1', 'Type 2', 'Classification_info', 'gen']
  exibir_colunas(colunas, colunas_por_linha=3)

def v_quantitativas():
  colunas = [
        'HP', 'Attack', 'Defense', 'Sp.Attack', 'Sp.Defense', 'Speed', 'Base_Stats',
        'normal_weakness', 'fire_weakness', 'water_weakness', 'electric_weakness',
        'grass_weakness', 'ice_weakness', 'fighting_weakness', 'poison_weakness',
        'ground_weakness', 'flying_weakness', 'psychic_weakness', 'bug_weakness',
        'rock_weakness', 'ghost_weakness', 'dragon_weakness', 'dark_weakness',
        'steel_weakness', 'fairy_weakness', 'number_immune', 'number_not_effective',
        'number_normal', 'number_super_effective'
    ]
  exibir_colunas(colunas, colunas_por_linha=4)

"""# Dicionário de Ações"""

acoes = {
  2: mostrar_dataset,
  3: tamanho_dataset,
  4: mostrar_colunas,
  5: v_qualitativas,
  6: v_quantitativas
}

"""# Main"""

while True:
  print("1 - Sair\n2 - Dataset (População)\n3 - Tamanho do Dataset (População e Amostra)\n4 - Variáveis (População)\n5 - V_Qualitativas (Amostra)\n6 - V_Quantitativas (Amostra)\n")

  try:
    op = int(input("Digite a opção desejada: "))
    print()

    if op == 1:
      print("Saindo...")
      break

    acao = acoes.get(op)
    if acao:
      acao()
    else:
      print("Opção inválida. Tente novamente.")
    print()

  except ValueError:
    print("Digite um número válido.")